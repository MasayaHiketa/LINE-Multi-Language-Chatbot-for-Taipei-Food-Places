# google_review_all.py

import os
import json
import time
import googlemaps
import re
from urllib.parse import quote_plus

# -------------------------------
# Ë®≠ÂÆö
# -------------------------------
API_KEY = os.getenv("GOOGLE_PLACES_API_KEY")
if not API_KEY:
    raise RuntimeError("Please set GOOGLE_PLACES_API_KEY environment variable")

OUTPUT_FILE = "ramen_google_reviews.json"

# ÂèéÈõÜÂØæË±°„ÅÆ‰∏äÈôêÔºàÂÖ®‰ΩìÔºâ
MAX_TOTAL = 1000

# 1 seed „ÅÇ„Åü„Çä„ÅÆÊ§úÁ¥¢ÂçäÂæÑ & „Éö„Éº„Ç∏Êï∞Ôºàplaces_nearby „ÅØ1„Éö„Éº„Ç∏ÊúÄÂ§ß20‰ª∂Ôºâ
SEARCH_RADIUS_M = 1000
MAX_PAGES_PER_SEED = 3  # 3„Éö„Éº„Ç∏ ‚âí 60‰ª∂/seed

# „É¨„Çπ„Éà„É©„É≥ÂÖ®ÂüüÔºà„Ç≠„Éº„ÉØ„Éº„ÉâÂà∂Èôê„Å™„ÅóÔºâ
PLACES_TYPE = "restaurant"
QUERY_KEYWORD = "dessert"  # „Åì„Åì„Çí "ÊãâÈ∫µ" „Å™„Å©„Å´„Åô„Çã„Å®„Ç∏„É£„É≥„É´Áµû„Çä

# -------------------------------
# Âè∞ÂåóÂ∏ÇÂÜÖ„ÅÆ seed Â∫ßÊ®ô„É™„Çπ„Éà
# -------------------------------
SEED_LOCATIONS = [
    ("Âè∞ÂåóËªäÁ´ô", (25.0478, 121.5319)),
    ("‰∏≠Â±±ÂçÄÂåóÈÉ®", (25.0802, 121.5268)),
    ("‰∏≠Â±±ÂçÄÂçóÈÉ®", (25.0520, 121.5325)),
    ("Â§ßÂÆâÂçÄÂåóÈÉ®", (25.0386, 121.5431)),
    ("Â§ßÂÆâÂçÄÂçóÈÉ®", (25.0203, 121.5437)),
    ("‰ø°Áæ©ÂçÄÂåóÈÉ®", (25.0405, 121.5600)),
    ("‰ø°Áæ©ÂçÄÂçóÈÉ®", (25.0282, 121.5773)),
    ("Ëê¨ËèØÂçÄ", (25.0356, 121.5007)),
    ("‰∏≠Ê≠£ÂçÄ", (25.0335, 121.5192)),
    ("ÊùæÂ±±ÂçÄ", (25.0593, 121.5573)),
    ("Â£´ÊûóÂçÄ", (25.0952, 121.5250)),
    ("ÂÖßÊπñÂçÄÂåóÈÉ®", (25.0960, 121.5900)),
    ("ÂÖßÊπñÂçÄÂçóÈÉ®", (25.0800, 121.5750)),
    ("ÂçóÊ∏ØÂçÄ", (25.0495, 121.6172)),
    ("ÂåóÊäïÂçÄË•øÈÉ®", (25.1191, 121.4980)),
    ("ÂåóÊäïÂçÄÊù±ÈÉ®", (25.1320, 121.5400)),
    ("ÊñáÂ±±ÂçÄË•øÈÉ®", (24.9886, 121.5450)),
    ("ÊñáÂ±±ÂçÄÊù±ÈÉ®", (24.9820, 121.5700)),
    ("Â§ßÂêåÂçÄ", (25.0617, 121.5151)),
    ("ÂÖßÊπñÁßëÊäÄÂúíÂçÄ", (25.0832, 121.5645)),
    ("ÂúìÂ±±Á´ô", (25.0727, 121.5196)),
    ("Âè§‰∫≠Á´ô", (25.0254, 121.5262)),
    ("Ë•øÈñÄÁî∫", (25.0423, 121.5079)),
    ("ÂÖ¨È§®", (25.0169, 121.5332)),
    ("Â§©ÊØç", (25.1167, 121.5266)),
]

# -------------------------------
# ÂàùÊúüÂåñ
# -------------------------------
gmaps = googlemaps.Client(key=API_KEY)

if os.path.exists(OUTPUT_FILE):
    with open(OUTPUT_FILE, "r", encoding="utf-8") as f:
        entries = json.load(f)
else:
    entries = []

existing_urls = {e["url"] for e in entries}
existing_place_ids = set()
# Êó¢Â≠ò JSON ÂÜÖ„ÅÆ place_id „Åå„ÅÇ„Çå„Å∞Âèñ„ÇäËæº„Çì„Åß„Åä„ÅèÔºà„Å™„Åë„Çå„Å∞Á©∫Ôºâ
for e in entries:
    pid = e.get("metadata", {}).get("place_id")
    if pid:
        existing_place_ids.add(pid)

total_new_count = 0

# -------------------------------
# „Éò„É´„Éë„Éº: 1 seed „Åß„Éö„Éº„Ç∏„É≥„Ç∞ÂèñÂæó
# -------------------------------
def fetch_nearby_for_seed(center, language="zh-TW"):
    """
    1 seed „Å´„Å§„ÅçÊúÄÂ§ß MAX_PAGES_PER_SEED „Éö„Éº„Ç∏„ÇíËøî„ÅôÔºà„Éö„Éº„Ç∏„É≥„Ç∞ÂØæÂøúÔºâ„ÄÇ
    """
    params = dict(location=center, radius=SEARCH_RADIUS_M, type=PLACES_TYPE, language=language)
    if QUERY_KEYWORD:
        params["keyword"] = QUERY_KEYWORD

    page = 0
    next_page_token = None

    while True:
        if next_page_token:
            # token ÊúâÂäπÂåñ„Åæ„Åß 2 ÁßíÁ®ãÂ∫¶ÂøÖË¶Å
            time.sleep(2.0)
            resp = gmaps.places_nearby(page_token=next_page_token)
        else:
            resp = gmaps.places_nearby(**params)

        results = resp.get("results", [])
        token = resp.get("next_page_token")

        yield results

        page += 1
        if not token or page >= MAX_PAGES_PER_SEED:
            break
        next_page_token = token

# -------------------------------
# „É°„Ç§„É≥Âá¶ÁêÜ
# -------------------------------
for area_name, center in SEED_LOCATIONS:
    if total_new_count >= MAX_TOTAL:
        break

    print(f"\nüìç Searching: {area_name}")

    new_count = 0
    for page_results in fetch_nearby_for_seed(center):
        for p in page_results:
            if total_new_count >= MAX_TOTAL:
                break

            place_id = p.get("place_id")
            if not place_id or place_id in existing_place_ids:
                continue

            # Ë©≥Á¥∞ÂèñÂæó
            details = gmaps.place(
                place_id=place_id,
                fields=[
                    "name", "formatted_address", "geometry", "vicinity",
                    "website", "rating", "user_ratings_total", "reviews",
                    "opening_hours", "price_level", "photo", "place_id"
                ],
                language="zh-TW"
            ).get("result", {})

            name = details.get("name")
            url = details.get("website") or details.get("vicinity")
            if not name:
                continue
            if not url or url in existing_urls:
                # „Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ Maps Ê§úÁ¥¢URL„Çí url „Å´„Åô„ÇãÔºàPC/LINE‰∏°ÂØæÂøúÔºâ
                search_query = f"{name} {details.get('formatted_address', '')}"
                url = f"https://www.google.com/maps/search/?api=1&query={quote_plus(search_query)}"
                if url in existing_urls:
                    continue

            # Á∑ØÂ∫¶ÁµåÂ∫¶
            loc = (details.get("geometry", {}) or {}).get("location", {}) or {}
            lat, lng = loc.get("lat"), loc.get("lng")
            if lat is None or lng is None:
                continue

            # ÈßÖ„Éª„Éê„ÇπÂÅú
            mrt_results = gmaps.places_nearby(
                location=(lat, lng), radius=800, type="subway_station", language="zh-TW"
            ).get("results", [])
            mrt_stations = [s.get("name") for s in mrt_results[:3] if s.get("name")]

            bus_results = gmaps.places_nearby(
                location=(lat, lng), radius=800, type="bus_station", language="zh-TW"
            ).get("results", [])
            bus_stations = [b.get("name") for b in bus_results[:3] if b.get("name")]

            # „É¨„Éì„É•„ÉºÊú¨Êñá
            reviews = details.get("reviews", []) or []
            text = "\n".join([r.get("text", "") for r in reviews if r.get("text")])

            # ‰æ°Ê†ºÂ∏Ø
            level = details.get("price_level", None)
            PRICE_LEVEL_MAP = {
                0: "NT$ÔΩû200",
                1: "NT$ÔΩû200",
                2: "NT$200ÔΩû400",
                3: "NT$400ÔΩû800",
                4: "NT$800‰ª•‰∏ä",
            }
            price_range = PRICE_LEVEL_MAP.get(level, "ÂÉπÊ†ºË≥áË®äÁº∫‰πè")

            # ÂÜôÁúüÔºàÂøÖË¶Å„Å™„Çâ photo_reference „Çí‰øùÂ≠òÊé®Â•®Ôºâ
            photos = details.get("photos", []) or []
            photo_ref = photos[0].get("photo_reference") if photos else None
            photo_url = (
                f"https://maps.googleapis.com/maps/api/place/photo"
                f"?maxwidth=800&photo_reference={photo_ref}&key={API_KEY}"
            ) if photo_ref else None

            # Maps URLÔºàplace_id Ê§úÁ¥¢„Åß„ÇÇOK„Å†„Åå„ÄÅPC/LINE‰∏°ÂØæÂøú„Åß search „ÇØ„Ç®„É™Âûã„Å´ÂØÑ„Åõ„ÇãÔºâ
            search_query = f"{name} {details.get('formatted_address', '')}"
            maps_url = f"https://www.google.com/maps/search/?api=1&query={quote_plus(search_query)}"

            metadata = {
                "source": "google_places",
                "place_id": details.get("place_id"),
                "address": details.get("formatted_address", ""),
                "location": {"lat": lat, "lng": lng},
                "rating": details.get("rating"),
                "reviews_count": details.get("user_ratings_total"),
                "mrt_stations": mrt_stations,
                "bus_stations": bus_stations,
                "maps_url": maps_url,
                "opening_hours": {
                    "weekday_text": (details.get("opening_hours", {}) or {}).get("weekday_text")
                },
                "price_range": price_range,
                "photo_url": photo_url,
                "photo_reference": photo_ref,  # ‚Üê „Éó„É≠„Ç≠„Ç∑ÈÅãÁî®„Åô„Çã„Å™„Çâ‰Ωø„ÅÜ
            }

            entry = {
                "title": name,
                "text": text,
                "url": url,
                "metadata": metadata
            }

            entries.append(entry)
            existing_urls.add(url)
            existing_place_ids.add(place_id)
            new_count += 1
            total_new_count += 1

            print(f"‚úÖ {name} added. ({total_new_count}/{MAX_TOTAL})")

        if total_new_count >= MAX_TOTAL:
            break

    print(f"‚úÖ {area_name}: {new_count} new places.")
    if total_new_count >= MAX_TOTAL:
        break

# -------------------------------
# ‰øùÂ≠ò
# -------------------------------
with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
    json.dump(entries, f, ensure_ascii=False, indent=2)

print(f"\n‚úÖ All done. Total new places: {total_new_count}. Total entries: {len(entries)}")
